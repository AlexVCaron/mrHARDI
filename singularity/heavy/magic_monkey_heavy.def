BootStrap: docker
From: nvidia/cuda:9.1-devel-ubuntu16.04

%environment
        export FSL_BIN=/mms/dev/fsl/bin
        export MRTRIX_BIN=/mms/dev/mrtrix/bin
        export DIAMOND_BIN=/mms/dev/diamond/bin
        export ANTS_BIN=/mms/dev/ants/bin

        export PATH=$ANTS_BIN:$DIAMOND_BIN:$MRTRIX_BIN:$FSL_BIN:$PATH
%setup
        export DIAMOND_PKG=diamond_package.tar.gz

        SOURCES=$SINGULARITY_ROOTFS/mms/sources
        DIAMOND_sources=$SOURCES/diamond

        mkdir -p $SOURCES
        mkdir -p $DIAMOND_sources

        tar -zxf $DIAMOND_PKG -C $DIAMOND_sources

        cp ../utils.sh $SINGULARITY_ROOTFS/mms/sources/mmy_utils.sh
%post
        cd /mms/sources
        . ./mmy_utils.sh
        cmake_version=3.10
        cmake_build=2

        # PATHS VARIABLES FOR SOURCES
        SOURCES=/mms/sources
        FSL_sources=$SOURCES/fsl
        DIAMOND_sources=$SOURCES/diamond
        CMAKE_sources=$SOURCES/cmake

        remove_if_exists $FSL_sources
        remove_if_exists $MRTRIX_sources
        remove_if_exists $CMAKE_sources

        # PATHS VARIABLES FOR INSTALLATION
        INSTALL=/mms/dev
        FSL=$INSTALL/fsl
        MRTRIX=$INSTALL/mrtrix
        DIAMOND=$INSTALL/diamond
        ANTS=$INSTALL/ants

        mkdir -p $INSTALL

        # CHECK CURRENT COMPLETED INSTALLATION STATE
        fsl_installed=$(assert_installation_complete $INSTALL fsl)
        mrtrix_installed=$(assert_installation_complete $INSTALL mrtrix)
        diamond_installed=$(assert_installation_complete $INSTALL diamond)
        ants_installed=$(assert_installation_complete $INSTALL ants)
        cmake_installed=$(assert_installation_complete $INSTALL cmake)

        sed -i 's/main/main restricted universe/g' /etc/apt/sources.list
        apt-get update && apt-get -y upgrade
        apt-get -y install locales
        apt-get -y install libc6
        apt-get -y install libc6-dev

        locale-gen en_US.utf8
        update-locale LANG=en_US.utf8

        export LC_CTYPE=en_US.utf8
        export LC_ALL=en_US.utf8
        export LANG=en_US.utf8
        export LANGUAGE=en_US.utf8
        rm -rf /var/lib/apt/lists/*
        rm -rf /var/cache/apt/*.bin

        sed -i 's/main/main restricted universe/g' /etc/apt/sources.list
        apt-get update && apt-get -y upgrade
        apt-get -y install software-properties-common
        add-apt-repository ppa:deadsnakes/ppa
        apt-get update
        apt-get -y install python3-pip
        apt-get -y install python3.7

        update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 1
        update-alternatives --config python3
        update-alternatives --set python3 /usr/bin/python3.7

        python3 -m pip install pip
        pip3 install --upgrade pip
        apt-get -y install python3.7-dev
        apt-get -y install unzip
        apt-get -y install python3.7-tk

        if [ ! $fsl_installed ] || [ ! $mrtrix_installed ] || [ ! $diamond_installed ] || [ ! $ants_installed ] || [ ! $cmake_installed ]
        then
            # Install required linux packages
            apt-get -y install linux-headers-$(uname -r)
            apt-get -y install apt-transport-https
            apt-get -y install binutils
            apt-get -y install build-essential
            apt-get -y install clang
            apt-get -y install cpio
            apt-get -y install git
            apt-get -y install libblas-dev
            apt-get -y install libeigen3-dev
            apt-get -y install liblapack-dev
            apt-get -y install libfftw3-dev
            apt-get -y install libgl1-mesa-dev
            apt-get -y install libomp-dev
            apt-get -y install libqt4-opengl-dev
            apt-get -y install libtiff5-dev
            apt-get -y install wget
            apt-get -y install zlib1g-dev

            if [ ! $cmake_installed ]
            then
                cmake_installer () {
                    mkdir -p $CMAKE_sources

                    cd $CMAKE_sources
                    wget https://cmake.org/files/v${cmake_version}/cmake-${cmake_version}.${cmake_build}.tar.gz
                    tar -xzvf cmake-${cmake_version}.${cmake_build}.tar.gz
                    cd cmake-${cmake_version}.${cmake_build}/

                    ./bootstrap
                    make -j $(nproc --all)
                    make install
                }

                ERR_VAR=$(cmake_installer) && touch $INSTALL/cmake_complete.flag || error_exit
            fi

            if [ ! $fsl_installed ]
            then
                fsl_installer () {
                    remove_if_exists $FSL
                    mkdir -p $FSL_sources

                    # Download and install FSL
                    cd $FSL_sources
                    wget https://fsl.fmrib.ox.ac.uk/fsldownloads/fslinstaller.py
                    python fslinstaller.py -d $FSL -D

                    echo "Cleaning $FSL"
                    cd $FSL
                    find . -maxdepth 1 -not \( \
                        -name . -or \
                        -name .. -or \
                        -name bin -or \
                        -name lib -or \
                        -name include -or \
                        -name etc -or \
                        -name config -or \
                        -name extras -or \
                        -name data \
                    \) -exec rm -rf "{}" \;
                    echo "Cleaning $FSL/bin"
                    cd $FSL/bin
                    find . -maxdepth 1 -not \( \
                        -name . -or \
                        -name .. -or \
                        -name 'eddy*' -or \
                        -name topup -or \
                        -name bet -or \
                        -name bet2 -or \
                        -name applytopup -or \
                        -name fslmaths \
                    \) -exec rm -rf "{}" \;
                    echo "Cleaning $FSL/extras"
                    cd $FSL/extras
                    find . -maxdepth 1 -not \( \
                        -name . -or \
                        -name .. -or \
                        -name bin -or \
                        -name lib -or \
                        -name include -or \
                        -name share \
                    \) -exec rm -rf "{}" \;
                }

                ERR_VAR=$(fsl_installer) && touch $INSTALL/fsl_complete.flag || error_exit
            fi

            if [ ! $mrtrix_installed ]
            then
                mrtrix_installer () {
                    remove_if_exists $MRTRIX
                    mkdir -p $MRTRIX

                    pip install --exists-action i numpy

                    # Download and install Mrtrix
                    git clone https://github.com/MRtrix3/mrtrix3.git $MRTRIX

                    cd $MRTRIX
                    ./configure -nogui -openmp
                    ./build

                    echo "Cleaning up $MRTRIX"
                    find . -maxdepth 1 -not \( \
                        -wholename './bin' -or \
                        -wholename './bin/*' -or \
                        -wholename './lib' -or \
                        -wholename './lib/libmrtrix*' \
                    \) -exec rm -rf "{}" \;

                    pip uninstall -y numpy
                }

                ERR_VAR=$(mrtrix_installer) && touch $INSTALL/mrtrix_complete.flag || error_exit
            fi

            if [ ! $diamond_installed ]
            then
                diamond_installer () {
                    remove_if_exists $DIAMOND
                    mkdir -p $DIAMOND

                    cd $DIAMOND_sources
                    ./build.sh --buildfolder $DIAMOND --nthreads $(nproc --all)
                    chmod 111 $DIAMOND/bin/crlDCIEstimate

                    cd $DIAMOND
                    find . -maxdepth 1 -not \( \
                        -name . -or \
                        -name .. -or \
                        -name bin \
                    \) -exec rm -rf "{}" \;
                }

                ERR_VAR=$(diamond_installer) && touch $INSTALL/diamond_complete.flag || error_exit
            fi

            if [ ! $ants_installed ]
            then
                ants_installer () {
                    remove_if_exists $ANTS
                    mkdir -p $ANTS

                    git clone https://github.com/cookpa/antsInstallExample.git $ANTS
                    cd $ANTS
                    chmod 777 installANTs.sh
                    ./installANTs.sh

                    rm -rf ANTs/ build/ LICENSE README.md installANTs.sh
                    mv install/* .
                    rm -rf install

                    cd $ANTS/bin
                    find . -maxdepth 1 -not \( \
                        -name . -or \
                        -name .. -or \
                        -name antsRegistration -or \
                        -name 'antsRegistrationSyN*' -or \
                        -name N4BiasFieldCorrection -or \
                        -name antsApplyTransforms -or \
                        -name antsMotionCorr -or \
                        -name antsMotionCorrDiffusionDirection -or \
                        -name DenoiseImage \
                    \) -exec rm -rf "{}" \;

                }

                ERR_VAR=$(ants_installer) && touch $INSTALL/ants_complete.flag || error_exit
            fi

            if [ ! $cmake_installed ]
            then
                cd $CMAKE_sources/cmake-${cmake_version}.${cmake_build}
                make uninstall
            fi

            apt-get -y remove apt-transport-https
            apt-get -y remove cpio
            apt-get -y remove git
            apt-get -y remove wget

            remove_if_exists $SOURCES
            exit 0
        fi
