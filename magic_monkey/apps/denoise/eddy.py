from os import chmod

import nibabel as nib
import numpy as np

from traitlets import Instance, Unicode, List, default, Float

from magic_monkey.base.application import MagicMonkeyBaseApplication
from magic_monkey.base.scripting import build_script
from magic_monkey.config.eddy import EddyConfiguration
from magic_monkey.config.algorithms.fsl import prepare_eddy_index, \
    prepare_acqp_file

_aliases = dict(
    bvals='Eddy.bvals',
    acqp='Eddy.acquisition_file',
    b0='Eddy.b0',
    rev='Eddy.rev',
    dwell='Eddy.dwell',
    out='Eddy.output_prefix'
)

_eddy_script = """
    args=""
    if [ $TOPUP ]
    then
        args="$args --topup=$TOPUP
    fi
    if [ $SCSFIELD ]
    then
        args="$args --field=$SCSFIELD
    fi
    if [ $SCSMAT ]
        args="$args --field_mat=$SCSMAT
    fi

    base_args="--imain=$dwi --mask=$mask --acqp=$acqp --index=$index"
    base_args="$base_args --bvecs=$bvecs --bvals=$bvals"

    {} --out {} $base_args $args {}
"""


class Eddy(MagicMonkeyBaseApplication):
    configuration = Instance(EddyConfiguration).tag(config=True)

    output_prefix = Unicode(u'eddy').tag(config=True)

    bvals = Unicode().tag(config=True, required=True)

    acquisition_file = Unicode().tag(
        config=True, required=True, exclusive_group="acqp", group_index=0
    )
    b0 = Unicode().tag(
        config=True, required=True, exclusive_group="acqp", group_index=1
    )
    rev = Unicode().tag(
        config=True, required=True, exclusive_group="acqp", group_index=1
    )
    dwell = Float().tag(config=True)

    aliases = _aliases
    classes = List()

    @default('classes')
    def _classes_default(self):
        return [Eddy, self.__class__, EddyConfiguration]

    def _validate_required(self):
        if self.rev:
            self.traits()["dwell"].tag(required=True)

        super()._validate_required()

    def _start(self):
        if self.rev:
            ap_shapes = [nib.load(b0).shape for b0 in self.image]
            pa_shapes = [nib.load(b0).shape for b0 in self.rev]

            acqp = prepare_acqp_file(ap_shapes, pa_shapes, self.dwell)
            with open("{}_acqp.txt".format(self.output_prefix), 'w+') as f:
                f.write("# MAGIC MONKEY -------------------------\n")
                f.write("# Autogenerated acquisition parameters file\n\n")
                f.write(acqp)

        bvals = np.loadtxt(self.bvals)
        indexes = prepare_eddy_index(bvals, 1)
        with open(
            "{}_eddy_index.txt".format(self.output_prefix), "w+"
        ) as f:
            f.write(" ".join([str(i) for i in indexes]))

        with open(
            "{}_script.sh".format(self.output_prefix), "w+"
        ) as f:
            eddy_exec = "eddy"
            if self.configuration.enable_cuda:
                eddy_exec += "_cuda"

            script = build_script(
                _eddy_script.format(
                    eddy_exec,
                    "{}.nii.gz".format(self.output_prefix),
                    self.configuration.serialize()
                ),
                ["dwi", "bvals", "bvecs", "mask", "acqp", "index"],
                ["topup", "scsfield", "scsmat"],
                header="\n".join([
                    "# Preparing environment",
                    "CUDA_HOME=/usr/local/cuda-9.1",
                    "export LD_LIBRARY_PATH=" + ":".join([
                        "$CUDA_HOME/extras/CUPTI/lib64",
                        "$CUDA_HOME/lib64",
                        "$LD_LIBRARY_PATH"
                    ]),
                    "export PATH=$CUDA_HOME/bin:$PATH\n"
                ]) if self.configuration.enable_cuda else ""
            )
            f.write(script)

        chmod("{}_script.sh".format(self.output_prefix), 0o0777)
