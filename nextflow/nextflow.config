// Parameter sections initialization
params.config = {
    denoise = { }
    measure = { }
    preprocess = { }
    reconstruct = { }
    register = { }
    utils = { }
    workflow = {
        preprocess = { }
        reconstruct = { }
        measure = { }
    }
}

params.metadata = {}

// Use gpu if available
params.use_cuda = true
// Keep empty processes for other tasks
params.conservative_resources = true
params.free_processes = 1
params.memory_buffer_gb = 8

// Inputs declaration
params.data_root = "tmp/input"
params.metadata.dwell = 0.062487
params.metadata.multiband = 2
params.metadata.gslider = 5
params.metadata.interleaved = true
params.metadata.slice_direction = "SI"
params.metadata.direction = "AP"
params.metadata.acquisition = "Linear"

// Reverse encoding
params.rev_is_b0 = false

// Outputs declaration
params.output_root = "outputs"
params.publish_all = true
params.publish_mode = "copy"
params.verbose_outputs = false

// Global preprocessing parameters
params.intensity_normalization = true

// T1
params.masked_t1 = true
params.t1mask2dwi_registration = true
params.register_t12b0_denoised = false
params.denoise_t1 = true
params.nlmeans_t1 = true
params.resample_data = true

params.bet.f = 0.65

// Eddy
params.eddy_correction = false
params.eddy_force_shelled = true
params.eddy_on_rev = true
params.eddy_pre_bet_mask = false

// Reconstruction
params.reconstruct_use_mrtrix = false
params.recons_diamond = false
params.recons_dti = true
params.recons_csd = true
params.frf_fa = 0.7
params.frf_min_fa = 0.5
params.frf_min_nvox = 200

// Resampling
params.resampling_resolution = 0.4

// Resources allocation -- DO NOT TOUCH --
import com.sun.management.OperatingSystemMXBean
import java.lang.management.ManagementFactory
if ( !executor || executor.name == "local" ) {
    def count = 0
    def avail_cpus = 0
    while ( count < 10 ) {
        check_cpus = Runtime.runtime.availableProcessors()
        avail_cpus = (check_cpus > avail_cpus) ? check_cpus : avail_cpus
        count += 1
    }

    if ( params.processes ) {
        if(params.processes > avail_cpus) {
            throw new RuntimeException(
                "Number of processes higher than available CPUs."
            )
        }
        else if(params.processes < 1) {
            throw new RuntimeException(
                "When set, number of processes must be >= 1 " +
                "and smaller or equal to the number of CPUs."
            )
        }
    }
    else {
        params.processes = avail_cpus
    }

    def sysmem = ((OperatingSystemMXBean) ManagementFactory.getOperatingSystemMXBean()).getTotalPhysicalMemorySize() / 1073741824
    if ( params.memory_buffer_gb )
        sysmem -= params.memory_buffer_gb

    executor.$local.memory = "${sysmem}GB"
    executor.$local.cpus = params.processes

    //println("Using local executor with ${executor.$local.cpus} processes and ${executor.$local.memory} of memory")
}

process {
    withLabel: res_full_node { cpus = params.processes }
    withLabel: res_conservative { cpus = Math.max(1, params.processes - params.free_processes) }
    withLabel: res_single_cpu { cpus = 1 }
}

singularity.autoMounts = true

if ( params.use_cuda ) {
    singularity.runOptions = "--nv"
}

// Required environment variables
env.FSLOUTPUTTYPE = 'NIFTI_GZ'
