// Parameter sections initialization
params.config = {
    denoise = { }
    measure = { }
    preprocess = { }
    reconstruct = { }
    register = { }
    utils = { }
    workflow = {
        preprocess = { }
        reconstruct = { }
        measure = { }
    }
}

params.metadata = {}

// Use gpu if available
params.use_cuda = true

// Inputs declaration
params.data_root = "tmp/input"
params.metadata.dwell = 0.062487
params.metadata.multiband = 2
params.metadata.gslider = 5
params.metadata.interleaved = true
params.metadata.slice_direction = "SI"
params.metadata.direction = "AP"
params.metadata.acquisition = "Linear"

// Reverse encoding
params.rev_is_b0 = false

// Outputs declaration
params.output_root = "outputs"
params.publish_all = true
params.publish_mode = "copy"
params.verbose_outputs = false

// T1
params.masked_t1 = true
params.t1mask2dwi_registration = true

params.bet.f = 0.65

// Eddy
params.eddy_correction = false
params.eddy_pre_denoise = false
params.eddy_force_shelled = true
params.eddy_on_rev = true
params.eddy_pre_bet_mask = false

// Reconstruction
params.reconstruct_use_mrtrix = true

// Resources allocation -- DO NOT TOUCH --
if ( params.processes ) {
    if(params.processes > Runtime.runtime.availableProcessors()) {
        throw new RuntimeException(
            "Number of processes higher than available CPUs."
        )
    }
    else if(params.processes < 1) {
        throw new RuntimeException(
            "When set, number of processes must be >= 1 " +
            "and smaller or equal to the number of CPUs."
        )
    }
    executor.$local.cpus = params.processes
}
else {
    params.processes = Runtime.runtime.availableProcessors()
}

process {
    withLabel: res_full_node { cpus = params.processes }
    withLabel: res_full_node_minus1 { cpus = params.processes - 1 }
}

singularity.autoMounts = true

if ( params.use_cuda ) {
    singularity.runOptions = "--nv"
}


// Required environment variables
env.FSLOUTPUTTYPE = 'NIFTI_GZ'